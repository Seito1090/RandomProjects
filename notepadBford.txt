void *readthread(void *arg) {

    //Open and check file
    char *filename = (char *) arg;
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error opening file %s\n", filename);
        pthread_exit(NULL);
    }

    //Initialize graph and checks if it went well, stop if it went wrong
    graph = (graph_t *)get_file_info(file); //graph is global so that each thread can access it
    if (graph == NULL) {
        printf("Error reading graph from file\n");
        pthread_exit(NULL);
    }

    //Decomment this line for debug purposes
    //printf("Number of nodes: %d\n", graph->file_infos->nb_nodes);

    //Fill the buffer with the source nodes and signal the other threads
    for (uint32_t src; src < graph->file_infos->nb_nodes; src++) {
        pthread_mutex_lock(&read_mutex);
        while ((readhead + 1) % BUFFERSIZE == readtail) {
            pthread_cond_wait(&read_not_full, &read_mutex);
        }
        readbuffer[readhead] = src;
        printf("Read thread: %d\n", src);
        readhead = (readhead + 1) % BUFFERSIZE;
        pthread_mutex_unlock(&read_mutex);

        pthread_cond_signal(&read_not_empty);
    }
    pthread_exit(NULL);
}


void *computers(void *arg) {
    uint32_t source;
    bool* args = (bool *)arg;
    bool read_done = args[0];
    bool write_done = args[1];

    thread_data_t *data = (thread_data_t *)malloc(sizeof(thread_data_t));
    while (true){
        pthread_mutex_lock(&read_mutex);
        while (readhead == readtail){
            pthread_cond_wait(&read_not_empty, &read_mutex);

            if (read_done) {
                pthread_mutex_unlock(&read_mutex);
                pthread_exit(NULL);
            }
        }
        source = readbuffer[readtail];
        readtail = (readtail + 1) % BUFFERSIZE;
        pthread_mutex_unlock(&read_mutex);

        pthread_cond_signal(&read_not_full);

        if (graph == NULL) {
            printf("Error: graph is null\n");
            pthread_exit(NULL);
        }
        ford_t *ford = (ford_t *)bellman_ford(graph->file_infos->nb_nodes, graph->file_infos->nb_edges, graph->graph_data, source, verbose);
        printf("Distance from %d to %d: %d\n", source, 1, ford->dist[1]);
        mcost_t * max = (mcost_t *)get_max(graph->file_infos->nb_nodes, ford->dist, source);
        printf("Max cost: %ld\n", max->cost);
        printf("Max node: %d\n", max->node);
        int32_t size = graph->file_infos->nb_nodes;
        int32_t * path = (int32_t *)get_path(max->node, source, ford->path, &size);
        data->source = source;
        data->max = max;
        data->size = size;
        data->path = path;
        printf("path size:  %d\n", size);
        free_path(path);
        free_max_struct(max);
        free_ford_struct(ford);
    }
    pthread_mutex_lock(&write_mutex);
    while ((writehead + 1) % BUFFERSIZE == writetail) {
        pthread_cond_wait(&write_not_full, &write_mutex);
    }
    writebuffer[writehead] = *data;
    writehead = (writehead + 1) % BUFFERSIZE;
    pthread_mutex_unlock(&write_mutex);

    pthread_cond_signal(&write_not_empty);
    pthread_exit(NULL);
}


// void *doublethread(void * arg){
//     //We just split the bellmanford into two threads
//     //We do this because writing and reading from a file is quite quick compared to the 
//     //actual computation of the bellmanford algorithm
// }